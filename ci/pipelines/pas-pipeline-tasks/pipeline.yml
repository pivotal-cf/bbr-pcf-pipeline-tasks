---
#! to set pipeline run: fly set-pipeline -p "pas-pipeline-tasks" -c <(ytt -f "ci/pipelines/pas-pipeline-tasks/pipeline.yml")

#@ tas_versions = [
#@   {"version_slug": "2-11", "pool_name": "us_2_11_lts2" },
#@ ]

s3_credentials: &s3_credentials
  bucket: ((storage.backup-bucket))
  region_name: ((storage.region))
  access_key_id: ((aws_credentials.access_key_id))
  secret_access_key: ((aws_credentials.secret_access_key))
  endpoint: ((storage.endpoint))

jobs:
#@ for v in tas_versions:
- name: #@ 'claim-env-' + v["version_slug"]
  plan:
  - in_parallel:
    - get: bbr-pipeline-tasks-repo
      trigger: true
      version: every
    - get: six-hours
      trigger: true
    - put: #@ 'tas-' + v["version_slug"]
      params:
        action: claim

- name: #@ 'validate-sample-pipeline-' + v["version_slug"]
  plan:
  - in_parallel:
    - get: bbr-pipeline-tasks-repo
      trigger: true
      version: every
      passed:
      - #@ 'claim-env-' + v["version_slug"]
    - get: six-hours
      trigger: true
      passed:
      - #@ 'claim-env-' + v["version_slug"]
    - get: #@ 'tas-' + v["version_slug"]
      trigger: true
      passed:
      - #@ 'claim-env-' + v["version_slug"]
  - put: bbr-pipeline-tasks-repo
    params:
      context: validation-of-sample-pas-pipeline
      path: bbr-pipeline-tasks-repo
      status: pending
  - task: validate-pipeline
    file: bbr-pipeline-tasks-repo/ci/tasks/validate-pipeline/task.yml
    input_mapping:
      pipeline: bbr-pipeline-tasks-repo
    params:
      PIPELINE_PATH: examples/pas-pipeline.yml
      SECRETS_PATH: examples/pas-secrets.yml
    on_failure:
      put: bbr-pipeline-tasks-repo
      params:
        context: validation-of-sample-pas-pipeline
        path: bbr-pipeline-tasks-repo
        status: failure
    on_success:
      put: bbr-pipeline-tasks-repo
      params:
        context: validation-of-sample-pas-pipeline
        path: bbr-pipeline-tasks-repo
        status: success

- name: #@ 'export-om-installation-' + v["version_slug"]
  serial: true
  plan:
  - in_parallel:
    - get: bbr-pipeline-tasks-repo
      trigger: true
      version: every
      passed:
      - #@ 'claim-env-' + v["version_slug"]
    - get: six-hours
      trigger: true
      passed:
      - #@ 'claim-env-' + v["version_slug"]
    - get: #@ 'tas-' + v["version_slug"]
      trigger: true
      passed:
      - #@ 'claim-env-' + v["version_slug"]
  - put: bbr-pipeline-tasks-repo
    params:
      context: export-om-installation
      path: bbr-pipeline-tasks-repo
      status: pending
  - file: #@ 'tas-' + v["version_slug"] + '/metadata'
    format: json
    load_var: pooled-env
  - task: export-om-installation
    file: bbr-pipeline-tasks-repo/tasks/export-om-installation/task.yml
    params: &opsman_credentials
      OPSMAN_URL: ((.:pooled-env.ops_manager.url))
      OPSMAN_USERNAME: ((.:pooled-env.ops_manager.username))
      OPSMAN_PASSWORD: ((.:pooled-env.ops_manager.password))
      OPSMAN_PRIVATE_KEY: ((.:pooled-env.ops_manager_private_key))
    on_failure:
      put: bbr-pipeline-tasks-repo
      params:
        context: export-om-installation
        path: bbr-pipeline-tasks-repo
        status: failure
    on_success:
      put: bbr-pipeline-tasks-repo
      params:
        context: export-om-installation
        path: bbr-pipeline-tasks-repo
        status: success
  - put: om-backup-artifact
    params:
      file: om-installation/installation_*.zip

- name: #@ 'bbr-backup-pas-' + v["version_slug"]
  plan:
  - in_parallel:
    - get: bbr-pipeline-tasks-repo
      trigger: true
      version: every
      passed:
      - #@ 'claim-env-' + v["version_slug"]
    - get: bbr-release
    - get: six-hours
      trigger: true
      passed:
      - #@ 'claim-env-' + v["version_slug"]
    - get: #@ 'tas-' + v["version_slug"]
      trigger: true
      passed:
      - #@ 'claim-env-' + v["version_slug"]
  - put: bbr-pipeline-tasks-repo
    params:
      context: bbr-backup-pas
      path: bbr-pipeline-tasks-repo
      status: pending
  - file: #@ 'tas-' + v["version_slug"] + '/metadata'
    format: json
    load_var: pooled-env
  - task: extract-binary
    file: bbr-pipeline-tasks-repo/tasks/extract-bbr-binary/task.yml
  - task: bbr-backup-pas
    file: bbr-pipeline-tasks-repo/tasks/bbr-backup-pas/task.yml
    params:
      <<: *opsman_credentials
    on_failure:
      put: bbr-pipeline-tasks-repo
      params:
        context: bbr-backup-pas
        path: bbr-pipeline-tasks-repo
        status: failure
    on_success:
      put: bbr-pipeline-tasks-repo
      params:
        context: bbr-backup-pas
        path: bbr-pipeline-tasks-repo
        status: success
  - in_parallel:
    - put: pas-backup-bucket
      params:
        file: pas-backup-artifact/pas-backup_*.tar
    - task: bbr-cleanup-pas
      file: bbr-pipeline-tasks-repo/tasks/bbr-cleanup-pas/task.yml
      params:
        <<: *opsman_credentials

- name: #@ 'bbr-backup-director-' + v["version_slug"]
  plan:
  - in_parallel:
    - get: bbr-pipeline-tasks-repo
      trigger: true
      version: every
      passed:
      - #@ 'claim-env-' + v["version_slug"]
    - get: bbr-release
    - get: six-hours
      trigger: true
      passed:
      - #@ 'claim-env-' + v["version_slug"]
    - get: #@ 'tas-' + v["version_slug"]
      trigger: true
      passed:
      - #@ 'claim-env-' + v["version_slug"]
  - put: bbr-pipeline-tasks-repo
    params:
      context: bbr-backup-director
      path: bbr-pipeline-tasks-repo
      status: pending
  - file: #@ 'tas-' + v["version_slug"] + '/metadata'
    format: json
    load_var: pooled-env
  - task: extract-binary
    file: bbr-pipeline-tasks-repo/tasks/extract-bbr-binary/task.yml
  - task: bbr-backup-director
    file: bbr-pipeline-tasks-repo/tasks/bbr-backup-director/task.yml
    params:
      <<: *opsman_credentials
    on_failure:
      put: bbr-pipeline-tasks-repo
      params:
        context: bbr-backup-director
        path: bbr-pipeline-tasks-repo
        status: failure
    on_success:
      put: bbr-pipeline-tasks-repo
      params:
        context: bbr-backup-director
        path: bbr-pipeline-tasks-repo
        status: success
  - in_parallel:
    - put: director-backup-bucket
      params:
        file: director-backup-artifact/director-backup_*.tar
    - task: bbr-cleanup-directors
      file: bbr-pipeline-tasks-repo/tasks/bbr-cleanup-director/task.yml
      params:
        <<: *opsman_credentials

- name: #@ 'check-opsman-status-' + v["version_slug"]
  serial: true
  plan:
  - in_parallel:
    - get: bbr-pipeline-tasks-repo
      trigger: true
      version: every
      passed:
      - #@ 'validate-sample-pipeline-' + v["version_slug"]
      - #@ 'export-om-installation-' + v["version_slug"]
      - #@ 'bbr-backup-director-' + v["version_slug"]
      - #@ 'bbr-backup-pas-' + v["version_slug"]
    - get: six-hours
      trigger: true
      passed:
      - #@ 'validate-sample-pipeline-' + v["version_slug"]
      - #@ 'export-om-installation-' + v["version_slug"]
      - #@ 'bbr-backup-director-' + v["version_slug"]
      - #@ 'bbr-backup-pas-' + v["version_slug"]
    - get: #@ 'tas-' + v["version_slug"]
      trigger: true
      passed:
      - #@ 'validate-sample-pipeline-' + v["version_slug"]
      - #@ 'export-om-installation-' + v["version_slug"]
      - #@ 'bbr-backup-director-' + v["version_slug"]
      - #@ 'bbr-backup-pas-' + v["version_slug"]
  - put: bbr-pipeline-tasks-repo
    params:
      context: check-opsman-status
      path: bbr-pipeline-tasks-repo
      status: pending
  - file: #@ 'tas-' + v["version_slug"] + '/metadata'
    format: json
    load_var: pooled-env
  - task: check-opsman-status
    file: bbr-pipeline-tasks-repo/tasks/check-opsman-status/task.yml
    params:
      <<: *opsman_credentials
    on_failure:
      put: bbr-pipeline-tasks-repo
      params:
        context: check-opsman-status
        path: bbr-pipeline-tasks-repo
        status: failure
  - task: check-opsman-status-during-apply-changes
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfplatformrecovery/bbr-pcf-pipeline-tasks
          tag: final
      inputs:
      - name: bbr-pipeline-tasks-repo
      params:
        OPSMAN_URL: ((.:pooled-env.ops_manager.url))
        OPSMAN_USERNAME: ((.:pooled-env.ops_manager.username))
        OPSMAN_PASSWORD: ((.:pooled-env.ops_manager.password))
        OPSMAN_PRIVATE_KEY: ((.:pooled-env.ops_manager_private_key))
      run:
        path: /bin/bash
        args:
        - -c
        - |
          set -eu

          source "bbr-pipeline-tasks-repo/scripts/om-cmd"
          om_cmd apply-changes &
          pid=$!
          sleep 20

          set +e
          output="$(./bbr-pipeline-tasks-repo/tasks/check-opsman-status/task.sh)"
          code=$?
          set -e

          test $code -ne 0
          echo "$output"
          grep "\"Apply Changes\" is in flight." <<< "$output"

          echo "Wait for \"Apply Changes\" to finish."
          wait $pid
    on_failure:
      put: bbr-pipeline-tasks-repo
      params:
        context: check-opsman-status
        path: bbr-pipeline-tasks-repo
        status: failure
    on_success:
      put: bbr-pipeline-tasks-repo
      params:
        context: check-opsman-status
        path: bbr-pipeline-tasks-repo
        status: success

- name: #@ 'unclaim-env-' + v["version_slug"]
  plan:
  - get: #@ 'tas-' + v["version_slug"]
    passed:
    - #@ 'check-opsman-status-' + v["version_slug"]
    trigger: true
  - put: #@ 'tas-' + v["version_slug"]
    params:
      action: unclaim
      env_file: #@ 'tas-' + v["version_slug"] + '/metadata'
#@ end

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource

- name: pcf-pool
  type: docker-image
  source:
    repository: cftoolsmiths/toolsmiths-envs-resource

resources:
- name: bbr-pipeline-tasks-repo
  type: pull-request
  icon: source-pull
  source:
    repository: pivotal-cf/bbr-pcf-pipeline-tasks
    disable_forks: true
    access_token: ((github.access_token))
    ignore_paths:
    - docker/*
    - README.md
    - tasks/bbr-backup-pks/*
    - tasks/bbr-backup-pks-clusters/*
    - tasks/bbr-cleanup-pks/*
    - tasks/bbr-cleanup-pks-clusters/*
    - tasks/lock-pks/*
    - tasks/unlock-pks/*

- name: om-backup-artifact
  type: s3
  source:
    <<: *s3_credentials
    regexp: installation_(.*).zip

- name: pas-backup-bucket
  type: s3
  source:
    <<: *s3_credentials
    regexp: pas-backup_(.*).tar

- name: director-backup-bucket
  type: s3
  source:
    <<: *s3_credentials
    regexp: director-backup_(.*).tar

- name: bbr-release
  type: pivnet
  source:
    api_token: ((pivnet.api_token))
    product_slug: p-bosh-backup-and-restore

- name: six-hours
  type: time
  source:
    interval: 6h
    start: 9:00 AM
    stop: 11:00 PM
    days: [Monday, Tuesday, Wednesday, Thursday, Friday]

#@ for v in tas_versions:
- name: #@ 'tas-' + v["version_slug"]
  type: pcf-pool
  source:
    api_token: ((toolsmiths.api_token))
    hostname: environments.toolsmiths.cf-app.com
    pool_name: #@ v["pool_name"]
#@ end
